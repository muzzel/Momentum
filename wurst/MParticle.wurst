package MParticle
	import Momentum
	import Vectors
	import Terrain
	import Lists

	
	public LinkedList<MParticle> particles = new LinkedList<MParticle>()
	
	public class MParticle
		vec3 pos
		vec3 vel
		vec3 forces
		unit actor
		real invMass
		boolean sleeping
		
		// getter/setter
		function getPos() returns vec3
			return pos
		
		function setPos(vec3 pos)
			this.pos = pos
		
		function adoptDummyPos()
			this.pos = vec3(actor.getX(), actor.getY(), 0.)
		
		function getVel() returns vec3
			return vel
		
		function setVel(vec3 vel)
			this.vel = vel
		
		function getForces() returns vec3
			return forces
		
		function setForces(vec3 forces)
			this.forces = forces
		
		function addForce(vec3 f)
			this.forces = this.forces + f
		
		function getUnit() returns unit
			return actor
		
		function setUnit(unit actor)
			this.actor = actor
		
		function getInvMass() returns real
			return invMass
		
		function setInvMass(real invMass)
			this.invMass = invMass
		
		function isSleeping() returns boolean
			return sleeping
		
		// constr
		construct(unit actor, vec3 pos, vec3 vel, real invMass)
			setUnit(actor)
			setPos(pos)
			setVel(vel)
			setInvMass(invMass)
			sleeping = false
			actor.addAbility(HEIGHT_ENABLER)
			actor.removeAbility(HEIGHT_ENABLER)
			particles.add(this)
			
		// loop
		function loopCalcPos()
			setPos(getPos() + (getVel() * (dt)))
			if(getVel().lengthSquared() >= 1.)
				sleeping = false
			else
				sleeping = true
		
		function loopMove()
			actor.setXY(pos.x, pos.y)
			//actor.setFlyHeight(pos.z - getTerrainZ(pos.x, pos.y), 0) //TODO
		
		function loopCalcVel()
			vec3 acc = forces * invMass
			setVel(getVel() + (acc * dt))
			
		ondestroy
			particles.remove(this)
			
	
	/** PRESET: Controllable particle **/
	public class MControllableParticle extends MParticle
		construct(unit actor, vec3 pos, vec3 vel, real invMass)
			super(actor, pos, vel, invMass)
			
		override function getPos() returns vec3
			vec2 p = actor.getPos()
			return vec3(p.x, p.y, 0.) //TODO: this.pos.z)
			
			

endpackage